{"version":3,"file":"popover-trigger.d.ts","sources":["popover-trigger.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MdePopoverPanel, MdeTarget } from './popover-interfaces';\nimport { MdePopoverPositionX, MdePopoverPositionY, MdePopoverTriggerEvent } from './popover-types';\n/**\n * This directive is intended to be used in conjunction with an mde-popover tag. It is\n * responsible for toggling the display of the provided popover instance.\n */\nexport declare class MdePopoverTrigger implements AfterViewInit, OnDestroy {\n    private _overlay;\n    _elementRef: ElementRef;\n    private _viewContainerRef;\n    private _dir;\n    private _changeDetectorRef;\n    ariaHaspopup: boolean;\n    private _portal;\n    private _overlayRef;\n    private _popoverOpen;\n    private _halt;\n    private _backdropSubscription;\n    private _positionSubscription;\n    private _mouseoverTimer;\n    private _openedByMouse;\n    /** References the popover instance that the trigger is associated with. */\n    popover: MdePopoverPanel;\n    /** References the popover target instance that the trigger is associated with. */\n    targetElement: MdeTarget;\n    /** Position of the popover in the X axis */\n    positionX: MdePopoverPositionX;\n    /** Position of the popover in the Y axis */\n    positionY: MdePopoverPositionY;\n    /** Popover trigger event */\n    triggerEvent: MdePopoverTriggerEvent;\n    /** Popover delay */\n    enterDelay: number;\n    /** Popover delay */\n    leaveDelay: number;\n    /** Popover overlap trigger */\n    overlapTrigger: boolean;\n    /** Popover target offset x */\n    targetOffsetX: number;\n    /** Popover target offset y */\n    targetOffsetY: number;\n    /** Popover arrow offset x */\n    arrowOffsetX: number;\n    /** Popover arrow width */\n    arrowWidth: number;\n    /** Popover arrow color */\n    arrowColor: string;\n    /** Popover container close on click */\n    closeOnClick: boolean;\n    /** Popover backdrop close on click */\n    backdropCloseOnClick: boolean;\n    /** Event emitted when the associated popover is opened. */\n    opened: EventEmitter<void>;\n    /** Event emitted when the associated popover is closed. */\n    closed: EventEmitter<void>;\n    constructor(_overlay: Overlay, _elementRef: ElementRef, _viewContainerRef: ViewContainerRef, _dir: Directionality, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    private _setCurrentConfig;\n    /** Whether the popover is open. */\n    get popoverOpen(): boolean;\n    onClick(event: MouseEvent): void;\n    onMouseEnter(event: MouseEvent): void;\n    onMouseLeave(event: MouseEvent): void;\n    /** Toggles the popover between the open and closed states. */\n    togglePopover(): void;\n    /** Opens the popover. */\n    openPopover(): void;\n    /** Closes the popover. */\n    closePopover(): void;\n    /** Removes the popover from the DOM. */\n    destroyPopover(): void;\n    /** Focuses the popover trigger. */\n    focus(): void;\n    /** The text direction of the containing app. */\n    get dir(): Direction;\n    /**\n    * This method ensures that the popover closes when the overlay backdrop is clicked.\n    * We do not use first() here because doing so would not catch clicks from within\n    * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\n    * explicitly when the popover is closed or destroyed.\n    */\n    private _subscribeToBackdrop;\n    /**\n    * This method sets the popover state to open and focuses the first item if\n    * the popover was opened via the keyboard.\n    */\n    private _initPopover;\n    /**\n    * This method resets the popover when it's closed, most importantly restoring\n    * focus to the popover trigger if the popover was opened via the keyboard.\n    */\n    private _resetPopover;\n    /** set state rather than toggle to support triggers sharing a popover */\n    private _setIsPopoverOpen;\n    /**\n    *  This method checks that a valid instance of MdPopover has been passed into\n    *  mdPopoverTriggerFor. If not, an exception is thrown.\n    */\n    private _checkPopover;\n    /**\n    *  This method creates the overlay from the provided popover's template and saves its\n    *  OverlayRef so that it can be attached to the DOM when openPopover is called.\n    */\n    private _createOverlay;\n    /**\n    * This method builds the configuration object needed to create the overlay, the OverlayConfig.\n    * @returns OverlayConfig\n    */\n    private _getOverlayConfig;\n    /**\n    * Listens to changes in the position of the overlay and sets the correct classes\n    * on the popover based on the new position. This ensures the animation origin is always\n    * correct, even if a fallback position is used for the overlay.\n    */\n    private _subscribeToPositions;\n    /**\n    * This method builds the position strategy for the overlay, so the popover is properly connected\n    * to the trigger.\n    * @returns ConnectedPositionStrategy\n    */\n    private _getPosition;\n    private _cleanUpSubscriptions;\n    _handleMousedown(event: MouseEvent): void;\n}\n"]}