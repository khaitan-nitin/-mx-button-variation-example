{"version":3,"file":"index.js","sources":["../../src/pipes.ts","../../src/AbilityModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pipe, ChangeDetectorRef, Inject, PipeTransform } from '@angular/core';\nimport { PureAbility, Unsubscribe, AnyAbility } from '@casl/ability';\nimport { Observable } from 'rxjs';\n\nclass AbilityPipe<T extends AnyAbility> {\n  protected _unsubscribeFromAbility?: Unsubscribe;\n  private _ability: T;\n  private _cd: ChangeDetectorRef;\n\n  constructor(ability: T, cd: ChangeDetectorRef) {\n    this._ability = ability;\n    this._cd = cd;\n  }\n\n  transform(...args: Parameters<T['can']>): boolean {\n    if (!this._unsubscribeFromAbility) {\n      this._unsubscribeFromAbility = this._ability.on('updated', () => this._cd.markForCheck());\n    }\n    return this._ability.can(...args);\n  }\n\n  ngOnDestroy() {\n    if (this._unsubscribeFromAbility) {\n      this._unsubscribeFromAbility();\n    }\n  }\n}\n\n@Pipe({ name: 'can', pure: false })\nexport class CanPipe<T extends AnyAbility> implements PipeTransform {\n  protected pipe: AbilityPipe<T>;\n\n  constructor(@Inject(PureAbility) ability: T, cd: ChangeDetectorRef) {\n    this.pipe = new AbilityPipe(ability, cd);\n  }\n\n  transform(\n    subject: Parameters<T['can']>[1],\n    action: Parameters<T['can']>[0],\n    field?: string\n  ): boolean {\n    return (this.pipe as any).transform(action, subject, field);\n  }\n\n  ngOnDestroy() {\n    this.pipe.ngOnDestroy();\n  }\n}\n\n@Pipe({ name: 'able', pure: false })\nexport class AblePipe<T extends AnyAbility> implements PipeTransform {\n  protected pipe: AbilityPipe<T>;\n\n  constructor(@Inject(PureAbility) ability: T, cd: ChangeDetectorRef) {\n    this.pipe = new AbilityPipe(ability, cd);\n  }\n\n  transform(...args: Parameters<T['can']>): boolean {\n    return this.pipe.transform(...args);\n  }\n\n  ngOnDestroy() {\n    this.pipe.ngOnDestroy();\n  }\n}\n\n@Pipe({ name: 'ablePure' })\nexport class AblePurePipe<T extends AnyAbility> implements PipeTransform {\n  private _ability: T;\n\n  constructor(@Inject(PureAbility) ability: T) {\n    this._ability = ability;\n  }\n\n  // TODO: `Observable` can be removed after https://github.com/angular/angular/issues/15041\n  transform(...args: Parameters<T['can']>): Observable<boolean> {\n    return new Observable((s) => {\n      const emit = () => s.next(this._ability.can(...args));\n      emit();\n      return this._ability.on('updated', emit);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CanPipe, AblePipe, AblePurePipe } from './pipes';\n\n@NgModule({\n  declarations: [\n    CanPipe,\n    AblePipe,\n    AblePurePipe,\n  ],\n  exports: [\n    CanPipe,\n    AblePipe,\n    AblePurePipe,\n  ],\n})\nexport class AbilityModule {\n}\n"]}