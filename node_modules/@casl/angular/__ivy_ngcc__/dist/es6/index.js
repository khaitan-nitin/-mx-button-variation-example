import { Pipe, Inject, ChangeDetectorRef, NgModule } from '@angular/core';
import { PureAbility } from '@casl/ability';
import { Observable } from 'rxjs';

import * as ɵngcc0 from '@angular/core';
class AbilityPipe {
    constructor(ability, cd) {
        this._ability = ability;
        this._cd = cd;
    }
    transform(...args) {
        if (!this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility = this._ability.on('updated', () => this._cd.markForCheck());
        }
        return this._ability.can(...args);
    }
    ngOnDestroy() {
        if (this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility();
        }
    }
}
AbilityPipe.ɵfac = function AbilityPipe_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
AbilityPipe.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbilityPipe });

class CanPipe {
    constructor(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    transform(subject, action, field) {
        return this.pipe.transform(action, subject, field);
    }
    ngOnDestroy() {
        this.pipe.ngOnDestroy();
    }
}
CanPipe.ɵfac = function CanPipe_Factory(t) { return new (t || CanPipe)(ɵngcc0.ɵɵdirectiveInject(PureAbility), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
CanPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "can", type: CanPipe, pure: false });
CanPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CanPipe, [{
        type: Pipe,
        args: [{ name: 'can', pure: false }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PureAbility]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
class AblePipe {
    constructor(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    transform(...args) {
        return this.pipe.transform(...args);
    }
    ngOnDestroy() {
        this.pipe.ngOnDestroy();
    }
}
AblePipe.ɵfac = function AblePipe_Factory(t) { return new (t || AblePipe)(ɵngcc0.ɵɵdirectiveInject(PureAbility), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
AblePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "able", type: AblePipe, pure: false });
AblePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AblePipe, [{
        type: Pipe,
        args: [{ name: 'able', pure: false }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PureAbility]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
class AblePurePipe {
    constructor(ability) {
        this._ability = ability;
    }
    // TODO: `Observable` can be removed after https://github.com/angular/angular/issues/15041
    transform(...args) {
        return new Observable((s) => {
            const emit = () => s.next(this._ability.can(...args));
            emit();
            return this._ability.on('updated', emit);
        });
    }
}
AblePurePipe.ɵfac = function AblePurePipe_Factory(t) { return new (t || AblePurePipe)(ɵngcc0.ɵɵdirectiveInject(PureAbility)); };
AblePurePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ablePure", type: AblePurePipe, pure: true });
AblePurePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AblePurePipe, [{
        type: Pipe,
        args: [{ name: 'ablePure' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PureAbility]
            }] }]; }, null); })();

class AbilityModule {
}
AbilityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AbilityModule });
AbilityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AbilityModule_Factory(t) { return new (t || AbilityModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AbilityModule, { declarations: [CanPipe, AblePipe, AblePurePipe], exports: [CanPipe, AblePipe, AblePurePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbilityModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CanPipe,
                    AblePipe,
                    AblePurePipe,
                ],
                exports: [
                    CanPipe,
                    AblePipe,
                    AblePurePipe,
                ]
            }]
    }], null, null); })();

export { AbilityModule, AblePipe, AblePurePipe, CanPipe };

//# sourceMappingURL=index.js.map