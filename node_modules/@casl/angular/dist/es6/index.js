import { Pipe, Inject, ChangeDetectorRef, NgModule } from '@angular/core';
import { PureAbility } from '@casl/ability';
import { Observable } from 'rxjs';

class AbilityPipe {
    constructor(ability, cd) {
        this._ability = ability;
        this._cd = cd;
    }
    transform(...args) {
        if (!this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility = this._ability.on('updated', () => this._cd.markForCheck());
        }
        return this._ability.can(...args);
    }
    ngOnDestroy() {
        if (this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility();
        }
    }
}
class CanPipe {
    constructor(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    transform(subject, action, field) {
        return this.pipe.transform(action, subject, field);
    }
    ngOnDestroy() {
        this.pipe.ngOnDestroy();
    }
}
CanPipe.decorators = [
    { type: Pipe, args: [{ name: 'can', pure: false },] }
];
CanPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
    { type: ChangeDetectorRef }
];
class AblePipe {
    constructor(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    transform(...args) {
        return this.pipe.transform(...args);
    }
    ngOnDestroy() {
        this.pipe.ngOnDestroy();
    }
}
AblePipe.decorators = [
    { type: Pipe, args: [{ name: 'able', pure: false },] }
];
AblePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
    { type: ChangeDetectorRef }
];
class AblePurePipe {
    constructor(ability) {
        this._ability = ability;
    }
    // TODO: `Observable` can be removed after https://github.com/angular/angular/issues/15041
    transform(...args) {
        return new Observable((s) => {
            const emit = () => s.next(this._ability.can(...args));
            emit();
            return this._ability.on('updated', emit);
        });
    }
}
AblePurePipe.decorators = [
    { type: Pipe, args: [{ name: 'ablePure' },] }
];
AblePurePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] }
];

class AbilityModule {
}
AbilityModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CanPipe,
                    AblePipe,
                    AblePurePipe,
                ],
                exports: [
                    CanPipe,
                    AblePipe,
                    AblePurePipe,
                ],
            },] }
];

export { AbilityModule, AblePipe, AblePurePipe, CanPipe };
//# sourceMappingURL=index.js.map
