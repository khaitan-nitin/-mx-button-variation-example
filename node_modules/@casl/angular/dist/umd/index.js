(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@casl/ability'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@casl/ability', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.casl = global.casl || {}, global.casl.ng = {}), global.ng.core, global.casl, global.rxjs));
}(this, (function (exports, core, ability, rxjs) { 'use strict';

    var AbilityPipe = /** @class */ (function () {
        function AbilityPipe(ability, cd) {
            this._ability = ability;
            this._cd = cd;
        }
        AbilityPipe.prototype.transform = function () {
            var _a;
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this._unsubscribeFromAbility) {
                this._unsubscribeFromAbility = this._ability.on('updated', function () { return _this._cd.markForCheck(); });
            }
            return (_a = this._ability).can.apply(_a, args);
        };
        AbilityPipe.prototype.ngOnDestroy = function () {
            if (this._unsubscribeFromAbility) {
                this._unsubscribeFromAbility();
            }
        };
        return AbilityPipe;
    }());
    var CanPipe = /** @class */ (function () {
        function CanPipe(ability, cd) {
            this.pipe = new AbilityPipe(ability, cd);
        }
        CanPipe.prototype.transform = function (subject, action, field) {
            return this.pipe.transform(action, subject, field);
        };
        CanPipe.prototype.ngOnDestroy = function () {
            this.pipe.ngOnDestroy();
        };
        CanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'can', pure: false },] }
        ];
        CanPipe.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [ability.PureAbility,] }] },
            { type: core.ChangeDetectorRef }
        ]; };
        return CanPipe;
    }());
    var AblePipe = /** @class */ (function () {
        function AblePipe(ability, cd) {
            this.pipe = new AbilityPipe(ability, cd);
        }
        AblePipe.prototype.transform = function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = this.pipe).transform.apply(_a, args);
        };
        AblePipe.prototype.ngOnDestroy = function () {
            this.pipe.ngOnDestroy();
        };
        AblePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'able', pure: false },] }
        ];
        AblePipe.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [ability.PureAbility,] }] },
            { type: core.ChangeDetectorRef }
        ]; };
        return AblePipe;
    }());
    var AblePurePipe = /** @class */ (function () {
        function AblePurePipe(ability) {
            this._ability = ability;
        }
        // TODO: `Observable` can be removed after https://github.com/angular/angular/issues/15041
        AblePurePipe.prototype.transform = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new rxjs.Observable(function (s) {
                var emit = function () {
                    var _a;
                    return s.next((_a = _this._ability).can.apply(_a, args));
                };
                emit();
                return _this._ability.on('updated', emit);
            });
        };
        AblePurePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'ablePure' },] }
        ];
        AblePurePipe.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [ability.PureAbility,] }] }
        ]; };
        return AblePurePipe;
    }());

    var AbilityModule = /** @class */ (function () {
        function AbilityModule() {
        }
        AbilityModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CanPipe,
                            AblePipe,
                            AblePurePipe,
                        ],
                        exports: [
                            CanPipe,
                            AblePipe,
                            AblePurePipe,
                        ],
                    },] }
        ];
        return AbilityModule;
    }());

    exports.AbilityModule = AbilityModule;
    exports.AblePipe = AblePipe;
    exports.AblePurePipe = AblePurePipe;
    exports.CanPipe = CanPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
