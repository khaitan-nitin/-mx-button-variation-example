import { Pipe, Inject, ChangeDetectorRef, NgModule } from '@angular/core';
import { PureAbility } from '@casl/ability';
import { Observable } from 'rxjs';

var AbilityPipe = /** @class */ (function () {
    function AbilityPipe(ability, cd) {
        this._ability = ability;
        this._cd = cd;
    }
    AbilityPipe.prototype.transform = function () {
        var _a;
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility = this._ability.on('updated', function () { return _this._cd.markForCheck(); });
        }
        return (_a = this._ability).can.apply(_a, args);
    };
    AbilityPipe.prototype.ngOnDestroy = function () {
        if (this._unsubscribeFromAbility) {
            this._unsubscribeFromAbility();
        }
    };
    return AbilityPipe;
}());
var CanPipe = /** @class */ (function () {
    function CanPipe(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    CanPipe.prototype.transform = function (subject, action, field) {
        return this.pipe.transform(action, subject, field);
    };
    CanPipe.prototype.ngOnDestroy = function () {
        this.pipe.ngOnDestroy();
    };
    CanPipe.decorators = [
        { type: Pipe, args: [{ name: 'can', pure: false },] }
    ];
    CanPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
        { type: ChangeDetectorRef }
    ]; };
    return CanPipe;
}());
var AblePipe = /** @class */ (function () {
    function AblePipe(ability, cd) {
        this.pipe = new AbilityPipe(ability, cd);
    }
    AblePipe.prototype.transform = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this.pipe).transform.apply(_a, args);
    };
    AblePipe.prototype.ngOnDestroy = function () {
        this.pipe.ngOnDestroy();
    };
    AblePipe.decorators = [
        { type: Pipe, args: [{ name: 'able', pure: false },] }
    ];
    AblePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] },
        { type: ChangeDetectorRef }
    ]; };
    return AblePipe;
}());
var AblePurePipe = /** @class */ (function () {
    function AblePurePipe(ability) {
        this._ability = ability;
    }
    // TODO: `Observable` can be removed after https://github.com/angular/angular/issues/15041
    AblePurePipe.prototype.transform = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Observable(function (s) {
            var emit = function () {
                var _a;
                return s.next((_a = _this._ability).can.apply(_a, args));
            };
            emit();
            return _this._ability.on('updated', emit);
        });
    };
    AblePurePipe.decorators = [
        { type: Pipe, args: [{ name: 'ablePure' },] }
    ];
    AblePurePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PureAbility,] }] }
    ]; };
    return AblePurePipe;
}());

var AbilityModule = /** @class */ (function () {
    function AbilityModule() {
    }
    AbilityModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CanPipe,
                        AblePipe,
                        AblePurePipe,
                    ],
                    exports: [
                        CanPipe,
                        AblePipe,
                        AblePurePipe,
                    ],
                },] }
    ];
    return AbilityModule;
}());

export { AbilityModule, AblePipe, AblePurePipe, CanPipe };
//# sourceMappingURL=index.js.map
