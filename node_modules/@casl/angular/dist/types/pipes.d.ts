import { ChangeDetectorRef, PipeTransform } from '@angular/core';
import { Unsubscribe, AnyAbility } from '@casl/ability';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
declare class AbilityPipe<T extends AnyAbility> {
    protected _unsubscribeFromAbility?: Unsubscribe;
    private _ability;
    private _cd;
    constructor(ability: T, cd: ChangeDetectorRef);
    transform(...args: Parameters<T['can']>): boolean;
    ngOnDestroy(): void;
}
export declare class CanPipe<T extends AnyAbility> implements PipeTransform {
    protected pipe: AbilityPipe<T>;
    constructor(ability: T, cd: ChangeDetectorRef);
    transform(subject: Parameters<T['can']>[1], action: Parameters<T['can']>[0], field?: string): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CanPipe<any>, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<CanPipe<any>, "can">;
}
export declare class AblePipe<T extends AnyAbility> implements PipeTransform {
    protected pipe: AbilityPipe<T>;
    constructor(ability: T, cd: ChangeDetectorRef);
    transform(...args: Parameters<T['can']>): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AblePipe<any>, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<AblePipe<any>, "able">;
}
export declare class AblePurePipe<T extends AnyAbility> implements PipeTransform {
    private _ability;
    constructor(ability: T);
    transform(...args: Parameters<T['can']>): Observable<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AblePurePipe<any>, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<AblePurePipe<any>, "ablePure">;
}
export {};

//# sourceMappingURL=pipes.d.ts.map