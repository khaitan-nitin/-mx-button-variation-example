{"version":3,"file":"pipes.d.ts","sources":["pipes.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ChangeDetectorRef, PipeTransform } from '@angular/core';\nimport { Unsubscribe, AnyAbility } from '@casl/ability';\nimport { Observable } from 'rxjs';\ndeclare class AbilityPipe<T extends AnyAbility> {\n    protected _unsubscribeFromAbility?: Unsubscribe;\n    private _ability;\n    private _cd;\n    constructor(ability: T, cd: ChangeDetectorRef);\n    transform(...args: Parameters<T['can']>): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class CanPipe<T extends AnyAbility> implements PipeTransform {\n    protected pipe: AbilityPipe<T>;\n    constructor(ability: T, cd: ChangeDetectorRef);\n    transform(subject: Parameters<T['can']>[1], action: Parameters<T['can']>[0], field?: string): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class AblePipe<T extends AnyAbility> implements PipeTransform {\n    protected pipe: AbilityPipe<T>;\n    constructor(ability: T, cd: ChangeDetectorRef);\n    transform(...args: Parameters<T['can']>): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class AblePurePipe<T extends AnyAbility> implements PipeTransform {\n    private _ability;\n    constructor(ability: T);\n    transform(...args: Parameters<T['can']>): Observable<boolean>;\n}\nexport {};\n"]}